properties([
  parameters([
    string( name: 'COMMIT_ID', defaultValue: 'master', description: 'Commit ID'),
    string( name: 'USER', defaultValue: 'mc', description: 'user'),
    choice( name: 'ACTION', choices: ['Config', 'install', 'start', 'deploy']), description: 'perform actions'),
    [$class       : 'ChoiceParameter',
     choiceType   : 'PT_SINGLE'
     description  : 'Select Environment'
     filterLength : 1,
     filterable   : false,
     name         : 'ENV'
     script       : [$class         : 'GroovyScript',
                     fallbackScript : [classpath: [], sandbox: false, script: 'return ["Could not get Thread.currentThread()"]'],
                     script         : [classpath: [], sandbox: false, script: '''
def build_path = Thread.currentThread().toString()
def regexp = /\\s+(\\/.*?)\\s+/
def matcher = (build_path = ~ regexp)
def jobName = matcher[0][1]
if (jobName.toLowerCase().contains("mtf")) {
  return ['mtf']
}
else {
  return ['preprod', 'mtf', 'prod']
}
                                                                     '''
                    [$class       : 'CascadeChoiceParameter',
                     choiceType   : 'PT_SINGLE_SELECT',
                     description  : '',
                     filterLength : 1,
                     filterable   : true, 
                     name         : 'INSTANCES',
                     referencedParameters : 'COMMIT_ID, ENV',
                     script               : [$calss         : 'GroovyScript',
                                             fallbackScript : [classpath: [], sandbox: false, script: 'return ["Could not get maintenance names"]'],
                                             script         : [classpath: [], sandbox: false,
                                                               scriipt: '''
                                                               import jenkins.*
                                                               import jenkins.model.*
                                                               import hudson.*
                                                               import hudson.model.*
                                                               import groovy.json.JsonSlurper
                                                               def jenkinsCredentials = com.cloudbees.plugins.credentials.CrdentialsProvider.lookupCredentials(
                                                                   com.cloudbees.plugins.credentials.Credentials.class,
                                                                   Jenkins.instance,
                                                                 null,
                                                                 null
                                                               ),
                                                               for (creds in jenkinsCredentials) {
                                                                   if creds.id == "Jenkins_ro") {
                                                                     api_token = creds.apiToken
                                                                   }
                                                               },
                                                               def jsonSlurper = new JsonSlurper()
                                                               switch(ENV) {
                                                                   case 'preprod':
                                                                   get = new URL("https://ci.mkle.int/gitlab/app.git/)
                                                                   break
                                                                   case 'mtf':
                                                                   get = new URL("https://ci.mkle.int/gitlab/app.git/)
                                                                   break
                                                                def  respText = get.getInputStream().getText()
                                                                def respJson = new JsonSlurper().parseText(respText)
                                                                def instances = []
                                                                resp.Json.each {
                                                                     if (it.type == 'tree' ) {
                                                                               def instance = it.name.tokenize('_')[1]
                                                                        instances.add(instance)
                                                                     }
                                                                }
                                                                return intances 
                                                                ' ' '
                                            ]]],
    ])
])//parameters
pipeline {
  agent {
     label 'master'
  }
     options { buildDiscarder(logRotator(numToKeepStr: '50')) }
  stages {
    stage ('marck the build) {
      steps {
          script {
            currentBuild.description = "ENV: ${ENV} INST: ${INSTANCES} ACT: ${ACTION}"
          }

       }
   }
   stage ('git checkout') {
     steps {
       script {
         git ref = params.COMMIT_ID
         if (git ref == '') {
             git ref = 'ref/heads/master'
         }
         if (params.ENV == 'dev') {
             gitRepoCfg = 'git@ci.mpst.int/ansi.git'
         }
         if (params.ENV == 'stage') {
             gitRepoCfg = 'git@aaa.com/aa.git'
         }
         if (params.ENV == 'DEV' || params.ENV == 'stage') {
             gitRepoPlaybook = 'git@cicd.submodule.git'
         }
         













                              
                                                  
       


 
     
